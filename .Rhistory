# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities) +
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) +
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') +
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in Wrong',
geo = g
)
p
library(ggplot2)
library(plotly)
# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in Wrong',
geo = g
)
p
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
View(df)
View(df)
rm(list=ls())
library(readxl)
predicted_probabilities2 <- read_excel("~/Desktop/predicted_probabilities2.xlsx")
View(predicted_probabilities2)
library(ggplot2)
library(plotly)
# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in Wrong',
geo = g
)
p
rm(list=ls())
library(readxl)
predicted_probabilities2 <- read_excel("~/Desktop/predicted_probabilities2.xlsx")
View(predicted_probabilities2)
library(ggplot2)
library(plotly)
# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in Wrong',
geo = g
)
p
rm(list=ls())
library(readxl)
predicted_probabilities2 <- read_excel("~/Desktop/predicted_probabilities2.xlsx")
View(predicted_probabilities2)
library(ggplot2)
library(plotly)
# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in Wrong',
geo = g
)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Reds',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in Wrong',
geo = g
)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Reds',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Blacks',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Grays',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)
p
library(ggplot2)
library(plotly)
# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g, label=COUNTRY
)
p
library(dplyr)
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)  %>%
dplyr::arrange(dplyr::desc(mean_support)))[seq(0, 100), ] %>%
add_trace(type="scattergeo", # view all scattergeo properties here: https://plot.ly/r/reference/#scattergeo
locations = CODE, text = COUNTRY, mode="text")
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)  %>%
dplyr::arrange(dplyr::desc(mean_support)))[seq(1, 10), ] %>%
add_trace(type="scattergeo", # view all scattergeo properties here: https://plot.ly/r/reference/#scattergeo
locations = CODE, text = COUNTRY, mode="text")
# light grey boundaries
l <- list(color = toRGB("black"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)  %>%
dplyr::arrange(dplyr::desc(mean_support)))[seq(1, 10), ] %>%
add_trace(type="scattergeo", # view all scattergeo properties here: https://plot.ly/r/reference/#scattergeo
locations = CODE, text = COUNTRY, mode="text")
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g
)  %>%
add_trace(type="scattergeo", # view all scattergeo properties here: https://plot.ly/r/reference/#scattergeo
locations = CODE, text = COUNTRY, mode="text")
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g) %>%
dplyr::arrange(dplyr::desc(GDP..BILLIONS.)))[seq(1, 10), ] %>%
add_trace(type="scattergeo", # view all scattergeo properties here: https://plot.ly/r/reference/#scattergeo
locations = CODE, text = COUNTRY, mode="text")
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Greys',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_support, colors = 'Reds',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_support, color = ~mean_conflict, colors = 'Reds',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country Even When It is in the Wrong',
geo = g)
p
p <- plot_geo(predicted_probabilities2) %>%
add_trace(
z = ~mean_conflict, color = ~mean_conflict, colors = 'Reds',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Predicted Probabilities %', tickprefix = '%') %>%
layout(
title = 'Predicted Probabilities of Support for Own Country when in Conflict of Interest',
geo = g)
p
rm(list=ls())
install.packages('rvest')
library('rvest')
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_html <- html_nodes(webpage,'.text-primary')
rank_data <- html_text(rank_data_html)
head(rank_data)
rank_data<-as.numeric(rank_data)
title_data_html <- html_nodes(webpage,'.lister-item-header a')
title_data <- html_text(title_data_html)
rm(list=ls())
library(readxl)
date <- read_excel("~/Desktop/date.xlsx")
View(date)
ISOweek<-function(date,format="%d-%m-%Y",return.val="weekofyear"){
##converts dates into "dayofyear" or "weekofyear", the latter providing the ISO-8601 week
##date should be a vector of class Date or a vector of formatted character strings
##format refers to the date form used if a vector of
##  character strings  is supplied
##convert date to POSIXt format
if(class(date)[1]%in%c("Date","character")){
date=as.POSIXlt(date,format=format)
}
if(class(date)[1]!="POSIXt"){
print("Date is of wrong format.")
break
}else if(class(date)[2]=="POSIXct"){
date=as.POSIXlt(date)
}
ISOweek<-function(date,format="%d-%m-%Y",return.val="weekofyear"){
##converts dates into "dayofyear" or "weekofyear", the latter providing the ISO-8601 week
##date should be a vector of class Date or a vector of formatted character strings
##format refers to the date form used if a vector of
##  character strings  is supplied
##convert date to POSIXt format
if(class(date)[1]%in%c("Date","character")){
date=as.POSIXlt(date,format=format)
}
if(class(date)[1]!="POSIXt"){
print("Date is of wrong format.")
break
}else if(class(date)[2]=="POSIXct"){
date=as.POSIXlt(date)
}
if(return.val=="dayofyear"){
##add 1 because POSIXt is base zero
return(date$yday+1)
}else if(return.val=="weekofyear"){
##Based on the ISO8601 weekdate system,
## Monday is the first day of the week
## W01 is the week with 4 Jan in it.
year=1900+date$year
jan4=strptime(paste(year,1,4,sep="-"),format="%Y-%m-%d")
wday=jan4$wday
wday[wday==0]=7  ##convert to base 1, where Monday == 1, Sunday==7
##calculate the date of the first week of the year
weekstart=jan4-(wday-1)*86400
weeknum=ceiling(as.numeric((difftime(date,weekstart,units="days")+0.1)/7))
#########################################################################
##calculate week for days of the year occuring in the next year's week 1.
#########################################################################
mday=date$mday
wday=date$wday
wday[wday==0]=7
year=ifelse(weeknum==53 & mday-wday>=28,year+1,year)
weeknum=ifelse(weeknum==53 & mday-wday>=28,1,weeknum)
################################################################
##calculate week for days of the year occuring prior to week 1.
################################################################
##first calculate the numbe of weeks in the previous year
year.shift=year-1
jan4.shift=strptime(paste(year.shift,1,4,sep="-"),format="%Y-%m-%d")
wday=jan4.shift$wday
wday[wday==0]=7  ##convert to base 1, where Monday == 1, Sunday==7
weekstart=jan4.shift-(wday-1)*86400
weeknum.shift=ceiling(as.numeric((difftime(date,weekstart)+0.1)/7))
##update year and week
year=ifelse(weeknum==0,year.shift,year)
weeknum=ifelse(weeknum==0,weeknum.shift,weeknum)
return(list("year"=year,"weeknum"=weeknum))
}else{
print("Unknown return.val")
break
}
}
nweek <- function(date, format="%d-%m-%Y", origin){
if(missing(origin)){
as.integer(format(strptime(date, format=format), "%W"))
}else{
x <- as.Date(date, format=format)
o <- as.Date(origin, format=format)
w <- as.integer(format(strptime(x, format=format), "%w"))
2 + as.integer(x - o - w) %/% 7
}
}
rm(list=ls())
}
View(ISOweek)
nweek(dates)
nweek(date)
nweek(date, origin="1-1-2015")
nweek <- function(date, format="%d-%m-%Y", origin){
if(missing(origin)){
as.integer(format(strptime(date, format=format), "%W"))
}else{
x <- as.Date(date, format=format)
o <- as.Date(origin, format=format)
w <- as.integer(format(strptime(x, format=format), "%w"))
2 + as.integer(x - o - w) %/% 7
}
}
}
nweek(date, origin="1-1-2015")
nweek <- function(date, format="%d-%m-%Y", origin){
if(missing(origin)){
as.integer(format(strptime(date, format=format), "%W"))
}else{
x <- as.Date(date, format=format)
o <- as.Date(origin, format=format)
w <- as.integer(format(strptime(x, format=format), "%w"))
2 + as.integer(x - o - w) %/% 7
}
}
}
nweek(date)
nweek <- function(date, format="%d-%m-%Y", origin){
if(missing(origin)){
as.integer(format(strptime(date, format=format), "%W"))
}else{
x <- as.Date(date, format=format)
o <- as.Date(origin, format=format)
w <- as.integer(format(strptime(x, format=format), "%w"))
2 + as.integer(x - o - w) %/% 7
}
nweek <- function(date, format="%d-%m-%Y", origin){
if(missing(origin)){
as.integer(format(strptime(date, format=format), "%W"))
}else{
x <- as.Date(date, format=format)
o <- as.Date(origin, format=format)
w <- as.integer(format(strptime(x, format=format), "%w"))
2 + as.integer(x - o - w) %/% 7
}
}
}
nweek(date)
nweek(date, origin="1-1-2015")
rm(list=ls())
View(predicted_probabilities2)
rm(list=ls())
install.packages("pwr")
library(pwr)
pwr.anova.test(k=4, f=0.25, sig.level=0.05, power=0.8)
pwr.anova.test(k=4, f=0.25, sig.level=0.05, power=0.9)
pwr.anova.test(k=4, f=0.4, sig.level=0.05, power=0.9)
pwr.anova.test(k=4, f=0.25, sig.level=0.05, power=0.9)
pwr.anova.test(k=4, f=0.25, sig.level=0.05, power=0.95)
pwr.anova.test(k=4, f=0.25, sig.level=0.001, power=0.95)
rm(list=ls())
install.packages("blogdown")
library(blogdown)
blogdown::install_hugo()
git clone https://github.com/nstrayer/personal_site.git
rm(list=ls())
install.packages("rmarkdown", type = "source")
library(rmarkdown)
touch _site.yml
touch index.Rmd
touch about.Rmd
_site.yml
_site.yml
getwd()
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site()
getwd()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site(encoding = 'UTF-8')
rmarkdown::render_site(encoding = 'UTF-8')
library(knitr)
rmarkdown::render_site(encoding = 'UTF-8')
update.packages("knitr")
update.packages(knitr)
update.packages()
y
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install.packages("knitr", repos = c("http://rforge.net", "http://cran.rstudio.org"), type = "source")
rmarkdown::render_site(encoding = 'UTF-8')
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site(encoding = 'UTF-8')
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site(encoding = 'UTF-8')
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site(encoding = 'UTF-8')
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site(encoding = 'UTF-8')
setwd("/Users/fatiheminearierol/kisilik_ozellikleri")
rmarkdown::render_site(encoding = 'UTF-8')
